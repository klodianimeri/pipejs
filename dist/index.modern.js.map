{"version":3,"file":"index.modern.js","sources":["../src/sync/pipe-sync.ts","../src/async/pipe-async.ts","../src/util/yield.ts","../src/util/yields.ts","../src/util/done.ts","../src/util/assert-sync.ts","../src/util/push.ts","../src/util/infinity.ts","../src/pipes/at.ts","../src/pipes/average.ts","../src/pipes/buffer-count.ts","../src/pipes/concat.ts","../src/pipes/count.ts","../src/pipes/default-if-empty.ts","../src/pipes/difference.ts","../src/pipes/distinct-until-changed.ts","../src/pipes/distinct-until-key-changed.ts","../src/pipes/distinct.ts","../src/pipes/drop.ts","../src/pipes/element-at.ts","../src/pipes/entries.ts","../src/pipes/end-with.ts","../src/pipes/every.ts","../src/pipes/fill.ts","../src/pipes/filter.ts","../src/pipes/find-index.ts","../src/pipes/find-last-index.ts","../src/pipes/find-last.ts","../src/pipes/find.ts","../src/pipes/first.ts","../src/pipes/flat.ts","../src/pipes/ignore-elements.ts","../src/pipes/includes.ts","../src/pipes/index-of.ts","../src/pipes/intersection.ts","../src/pipes/is-disjoint-from.ts","../src/pipes/is-empty.ts","../src/pipes/is-subset-of.ts","../src/pipes/is-superset-of.ts","../src/pipes/keys.ts","../src/pipes/last-index-of.ts","../src/pipes/last.ts","../src/pipes/map-to.ts","../src/pipes/map.ts","../src/pipes/max.ts","../src/pipes/min.ts","../src/pipes/pop.ts","../src/pipes/reduce.ts","../src/pipes/reverse.ts","../src/pipes/scan.ts","../src/pipes/size.ts","../src/pipes/skip-last.ts","../src/pipes/skip.ts","../src/pipes/slice.ts","../src/pipes/some.ts","../src/pipes/splice.ts","../src/pipes/start-with.ts","../src/pipes/sum.ts","../src/pipes/symmetric-difference.ts","../src/pipes/take-last.ts","../src/pipes/take-while.ts","../src/pipes/take.ts","../src/pipes/to-array.ts","../src/pipes/to-set.ts","../src/pipes/union.ts","../src/pipes/values.ts"],"sourcesContent":["import { Pipe, PipeIterator, PipeIteratorResult } from \"../pipe.js\";\r\n\r\nexport function* pipeSync(source: Iterable<any, any, unknown>, ...pipes: Array<Pipe>): Iterable<any, any, unknown> {\r\n    if (!source || typeof source[Symbol.iterator] !== 'function') {\r\n        throw new Error(`Source ${source} not a sync iterator!`);\r\n    }\r\n\r\n    if (!Array.isArray(pipes) || (pipes = pipes.filter(p => typeof p === 'function')).length === 0) {\r\n        yield* source;\r\n        return;\r\n    }\r\n\r\n    let pipeIterators: Array<PipeIterator> = new Array<PipeIterator>();\r\n\r\n    for (const pipe of pipes) {\r\n        pipeIterators.push(pipe());\r\n    }\r\n\r\n    let iterator = source[Symbol.iterator]();\r\n\r\n    let iteratorResult: IteratorResult<any> = iterator.next();\r\n\r\n    while (true) {\r\n\r\n        let done: boolean | undefined = iteratorResult.done;\r\n\r\n        let results: Array<IteratorResult<any>> = new Array<IteratorResult<any>>(iteratorResult);\r\n\r\n        for (let i = 0; i < pipeIterators.length; i++) {\r\n            let allpipeResults: Array<IteratorResult<any>> = new Array<IteratorResult<any>>();\r\n\r\n            for (let j = 0; j < results.length; j++) {\r\n\r\n                let piperesult: PipeIteratorResult = pipeIterators[i](results[j]);\r\n\r\n                piperesult = Array.isArray(piperesult) ? piperesult : [piperesult];\r\n\r\n                for (let e = 0; e < piperesult.length; e++) {\r\n                    if (typeof piperesult[e] === 'undefined') continue;\r\n\r\n                    if (i < (pipes.length - 1)) {\r\n                        allpipeResults.push(piperesult[e]);\r\n                        continue;\r\n                    }\r\n\r\n                    if ((piperesult[e] as IteratorResult<any, any>)?.done) return;\r\n\r\n                    if (piperesult[e]?.hasOwnProperty('value')) yield (piperesult[e]).value;\r\n                }\r\n            }\r\n\r\n            results = allpipeResults;\r\n        }\r\n\r\n        if (done) break;\r\n\r\n        iteratorResult = iterator.next();\r\n    }\r\n}","import { Pipe, PipeIterator, PipeIteratorResult } from \"../pipe.js\";\r\n\r\nexport async function* pipeAsync(source: AsyncIterable<any, any, unknown>, ...pipes: Array<Pipe>): AsyncIterable<any, any, unknown> {\r\n    if (!source || typeof source[Symbol.asyncIterator] !== 'function') {\r\n        throw new Error(`Source ${source} not an async iterator!`);\r\n    }\r\n\r\n    if (!Array.isArray(pipes) || pipes.length === 0) {\r\n        yield* source;\r\n        return;\r\n    }\r\n\r\n    let pipeIterators: Array<PipeIterator> = new Array<PipeIterator>();\r\n\r\n    for (const pipe of pipes) {\r\n        pipeIterators.push(pipe());\r\n    }\r\n\r\n    let iterator = source[Symbol.asyncIterator]();\r\n\r\n    let iteratorResult: IteratorResult<any> = await iterator.next();\r\n\r\n    while (true) {\r\n\r\n        let done: boolean | undefined = iteratorResult.done;\r\n\r\n        let results: Array<IteratorResult<any>> = new Array<IteratorResult<any>>(iteratorResult);\r\n\r\n        for (let i = 0; i < pipeIterators.length; i++) {\r\n            let allpipeResults: Array<IteratorResult<any>> = new Array<IteratorResult<any>>();\r\n\r\n            for (let j = 0; j < results.length; j++) {\r\n\r\n                let piperesult: PipeIteratorResult = pipeIterators[i](results[j]);\r\n\r\n                piperesult = Array.isArray(piperesult) ? piperesult : [piperesult];\r\n\r\n                for (let e = 0; e < piperesult.length; e++) {\r\n\r\n                    if (typeof piperesult[e] === 'undefined') continue;\r\n\r\n                    if (i < (pipes.length - 1)) {\r\n                        allpipeResults.push(piperesult[e] as IteratorResult<any, any>);\r\n                        continue;\r\n                    }\r\n\r\n                    if ((piperesult[e] as IteratorResult<any, any>)?.done) return;\r\n\r\n                    if ('value' in piperesult[e]) yield (piperesult[e] as IteratorResult<any, any>).value;\r\n                }\r\n            }\r\n\r\n            results = allpipeResults;\r\n        }\r\n\r\n        if (done) break;\r\n\r\n        iteratorResult = await iterator.next();\r\n    }\r\n}\r\n","export const Yield = (value: any): IteratorYieldResult<any> => { return { value: value, done: false } };","export const Yields = (values: Array<any>): Array<IteratorYieldResult<any>> => {\r\n    let yields: Array<IteratorYieldResult<any>> = new Array<IteratorYieldResult<any>>();\r\n    for (let i = 0; i < values.length; i++) {\r\n        yields[i] = { value: values[i], done: false };\r\n    }\r\n    return yields;\r\n}","export const Done = (value?: any) => Object({ value: value, done: true });","export const assertSync = (value?: Iterable<any, any, unknown>) => {\r\n    if (!value || typeof value[Symbol.iterator] !== 'function') {\r\n        throw new Error(`Value not a sync iterator: ${value}`);\r\n    }\r\n};","export const push = (array: Array<any>, value: any) => { array.splice(array.length, 0, value); return array; }","export const positiveInfinity = () => Number.POSITIVE_INFINITY;\r\nexport const negativeInfinity = () => Number.NEGATIVE_INFINITY;","import { Pipe } from \"../pipe.js\";\r\nimport { Done } from \"../util/index.js\";\r\n\r\nexport function at(index: number): Pipe {\r\n    return () => {\r\n        let i: number = -1;\r\n\r\n        return (result: IteratorResult<any>): IteratorResult<any> | Array<IteratorResult<any>> => {\r\n            ++i;\r\n\r\n            if (result?.done) {\r\n                return result;\r\n            }\r\n\r\n            if (i === index) {\r\n                return [result, Done()];\r\n            }\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { Yield } from \"../util/index.js\";\r\n\r\nexport function average(): Pipe {\r\n    return () => {\r\n        let count: number = 0;\r\n        let sum: number = 0;\r\n        return (result: IteratorResult<any>): IteratorResult<any> | Array<IteratorResult<any>> => {\r\n            if (result?.done) {\r\n                return count === 0 ? result : [Yield(sum / count), result];\r\n            }\r\n\r\n            if (typeof result.value === 'number') {\r\n                ++count;\r\n                sum += result.value;\r\n            }\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { Yield } from \"../util/index.js\";\r\n\r\nexport function bufferCount(count: number, every?: number): Pipe {\r\n    return () => {\r\n        let buffer: Array<any> = new Array<any>();\r\n        count = (typeof count === 'number' && count > 1) ? count : 1;\r\n        every = (typeof every === 'number' && every > 1) ? every : count;\r\n\r\n        return (result: IteratorResult<any>): IteratorResult<any> | Array<IteratorResult<any>> => {\r\n            if (result?.done) {\r\n                return buffer.length > 0 ? [Yield(buffer), result] : result;\r\n            }\r\n            buffer.push(result.value);\r\n            if (buffer.length === count) {\r\n                result.value = new Array<any>(...buffer);\r\n                for (let i = 0; i < every; i++) {\r\n                    buffer.shift();\r\n                }\r\n                return result;\r\n            }\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { assertSync, push, Yields } from \"../util/index.js\";\r\n\r\nexport function concat(source: Iterable<any, any, unknown>): Pipe {\r\n    assertSync(source);\r\n\r\n    return () => {\r\n        return (result: IteratorResult<any>): IteratorResult<any> | Array<IteratorResult<any>> => {\r\n            if (result?.done) {\r\n                return push(Yields(Array.from(source)), result);\r\n            }\r\n\r\n            return result;\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { Yield } from \"../util/index.js\";\r\n\r\nexport function count(): Pipe {\r\n    return () => {\r\n        let i: number = -1;\r\n        return (result: IteratorResult<any>): Array<IteratorResult<any>> => {\r\n            ++i;\r\n            if (result?.done) {\r\n                return [Yield(i), result];\r\n            }\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { Yield } from \"../util/index.js\";\r\n\r\nexport function defaultIfEmpty(value: any): Pipe {\r\n    return () => {\r\n        let isempty: boolean = true;\r\n        return (result: IteratorResult<any>): IteratorResult<any> | Array<IteratorResult<any>> => {\r\n            if (result?.done) {\r\n                if (isempty) {\r\n                    return [Yield(value), result];\r\n                }\r\n            } else {\r\n                isempty = false;\r\n            }\r\n            return result;\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { assertSync } from \"../util/index.js\";\r\n\r\nexport function difference(source: Iterable<any, any, unknown>): Pipe {\r\n    assertSync(source);\r\n\r\n    return () => {\r\n        let sourceSet: Set<any> = source instanceof Set ? source : new Set<any>(source);\r\n\r\n        return (result: IteratorResult<any>): IteratorResult<any> => {\r\n            if (result?.done) {\r\n                return result;\r\n            }\r\n\r\n            if (!sourceSet.has(result.value)) {\r\n                sourceSet.add(result.value);\r\n                return result;\r\n            }\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\n\r\nexport function distinctUntilChanged(comparator?: (previous: any, current: any) => boolean): Pipe {\r\n    comparator = typeof comparator === 'function' ? comparator : (a, b) => a === b;\r\n\r\n    return () => {\r\n        let last: any;\r\n\r\n        return (result: IteratorResult<any>): IteratorResult<any> => {\r\n            if (result?.done || !comparator(result.value, last)) {\r\n                last = result.value;\r\n                return result;\r\n            }\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\n\r\nexport function distinctUntilKeyChanged(key: string, comparator?: (previous: any, current: any) => boolean): Pipe {\r\n    comparator = typeof comparator === 'function' ? comparator : (a, b) => a === b;\r\n\r\n    return () => {\r\n        let last: any;\r\n        return (result: IteratorResult<any>): IteratorResult<any> => {\r\n            if (result?.done || !result.value?.hasOwnProperty(key) || !last?.hasOwnProperty(key) || !comparator(result.value[key], last[key])) {\r\n                last = result.value;\r\n                return result;\r\n            }\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\n\r\nexport function distinct(keyselector?: (element: any) => any): Pipe {\r\n    keyselector = typeof keyselector === 'function' ? keyselector : (e) => e;\r\n\r\n    return () => {\r\n        let elements: Set<any> = new Set<any>();\r\n\r\n        return (result: IteratorResult<any>): IteratorResult<any> => {\r\n            if (result?.done) {\r\n                return result;\r\n            }\r\n\r\n            if (!elements.has(keyselector(result.value))) {\r\n                elements.add(keyselector(result.value));\r\n                return result;\r\n            }\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\n\r\nexport function drop(count: number): Pipe {\r\n    count = typeof count === 'number' ? count : 0;\r\n    return () => {\r\n        let i: number = -1;\r\n        return (result: IteratorResult<any>): IteratorResult<any> => {\r\n            ++i;\r\n            if (result?.done) return result;\r\n\r\n            if (i >= count) {\r\n                return result;\r\n            }\r\n        };\r\n    }\r\n}","import { at } from \"./at.js\";\r\n\r\nexport const elementAt = at;","import { Pipe } from \"../pipe.js\";\r\n\r\nexport function entries(): Pipe {\r\n    return () => {\r\n        let i: number = -1;\r\n\r\n        return (result: IteratorResult<any>): IteratorResult<any> => {\r\n            ++i;\r\n            if (!result.done && !Array.isArray(result.value)) {\r\n                result.value = [i, result.value];\r\n            }\r\n            return result;\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { Yields, push } from \"../util/index.js\";\r\n\r\nexport function endWith(...elements: Array<any>): Pipe {\r\n    return () => {\r\n        return (result: IteratorResult<any>): IteratorResult<any> | Array<IteratorResult<any>> => {\r\n            if (result.done) {\r\n                return push(Yields(elements), result);\r\n            } else {\r\n                return result;\r\n            }\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { Yield, Done } from \"../util/index.js\";\r\n\r\nexport function every(predicate: (element: any, index?: number) => boolean): Pipe {\r\n    return () => {\r\n        let i: number = -1;\r\n\r\n        return (result: IteratorResult<any>): Array<IteratorResult<any>> => {\r\n            ++i;\r\n            if (result?.done) {\r\n                return [Yield(true), result];\r\n            } else if (!predicate(result.value, i)) {\r\n                return [Yield(false), Done()];\r\n            }\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { positiveInfinity } from \"../util/index.js\";\r\n\r\nexport function fill(value: any, start?: number, end?: number): Pipe {\r\n    start = typeof start === 'number' ? start : 0;\r\n    end = typeof end === 'number' ? end : positiveInfinity();\r\n    return () => {\r\n        let i = -1;\r\n        return (result: IteratorResult<any>): IteratorResult<any> => {\r\n            ++i;\r\n            if (!result?.done && i >= start && i < end) {\r\n                result.value = value;\r\n            }\r\n            return result;\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\n\r\nexport function filter(predicate: (element: any, index?: number) => boolean): Pipe {\r\n    return () => {\r\n        let i: number = -1;\r\n        return (result: IteratorResult<any>): IteratorResult<any> => {\r\n            ++i;\r\n\r\n            if (result?.done) {\r\n                return result;\r\n            }\r\n\r\n            if (!predicate(result.value, i)) return;\r\n\r\n            return result;\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { Yield, Done } from \"../util/index.js\";\r\n\r\nexport function findIndex(predicate: (element: any, index?: number) => boolean, fromIndex?: number): Pipe {\r\n    fromIndex = typeof fromIndex === 'number' ? fromIndex : 0;\r\n    return () => {\r\n        let i: number = -1;\r\n        return (result: IteratorResult<any>): IteratorResult<any> | Array<IteratorResult<any>> => {\r\n            ++i;\r\n            if (result?.done) {\r\n                return result;\r\n            } else if (i >= fromIndex && predicate(result.value, i)) {\r\n                return [Yield(i), Done()];\r\n            }\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { Yield } from \"../util/index.js\";\r\n\r\nexport function findLastIndex(predicate: (element: any, index?: number) => boolean, fromIndex?: number): Pipe {\r\n    fromIndex = typeof fromIndex === 'number' ? fromIndex : 0;\r\n    return () => {\r\n        let i: number = -1;\r\n        let lastIndex: number = -1;\r\n        return (result: IteratorResult<any>): IteratorResult<any> | Array<IteratorResult<any>> => {\r\n            ++i;\r\n            if (result?.done) {\r\n                return [Yield(lastIndex), result];\r\n            }\r\n            else if (predicate(result.value)) {\r\n                lastIndex = i;\r\n            }\r\n        };\r\n    }\r\n}\r\n","import { Pipe } from \"../pipe.js\";\r\nimport { Yield } from \"../util/index.js\";\r\n\r\nexport function findLast(predicate: (element: any, index?: number) => boolean): Pipe {\r\n    return () => {\r\n        let i: number = -1;\r\n        let last: any;\r\n        return (result: IteratorResult<any>): IteratorResult<any> | Array<IteratorResult<any>> => {\r\n            ++i;\r\n            if (result?.done) {\r\n                return typeof last === 'undefined' ? result : [Yield(last), result];\r\n            }\r\n            if (predicate(result.value, i)) {\r\n                last = result.value;\r\n            }\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { Done } from \"../util/index.js\";\r\n\r\nexport function find(predicate: (element: any, index?: number) => boolean): Pipe {\r\n    return () => {\r\n        let i: number = -1;\r\n        return (result: IteratorResult<any>): IteratorResult<any> | Array<IteratorResult<any>> => {\r\n            ++i;\r\n            if (result?.done) {\r\n                return result;\r\n            }\r\n\r\n            if (predicate(result.value, i)) {\r\n                return [result, Done()];\r\n            }\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { Done } from \"../util/index.js\";\r\n\r\nexport function first(): Pipe {\r\n    return () => {\r\n        return (result: IteratorResult<any>): IteratorResult<any> | Array<IteratorResult<any>> => {\r\n            if (result?.done) {\r\n                return result;\r\n            }\r\n\r\n            return [result, Done()];\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { Yields } from \"../util/index.js\";\r\n\r\nexport function flat(depth?: number): Pipe {\r\n    depth = (typeof depth === 'number' && depth >= 1) ? depth : 1;\r\n    return () => {\r\n        return (result: IteratorResult<any>): IteratorResult<any> | Array<IteratorResult<any>> => {\r\n            if (result?.done || typeof result.value[Symbol.iterator] !== 'function') {\r\n                return result;\r\n            }\r\n\r\n            return Yields(Array.from(result.value).flat(depth));\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\n\r\nexport function ignoreElements(): Pipe {\r\n    return () => {\r\n        return (result: IteratorResult<any>): IteratorResult<any> => {\r\n            if (result?.done) {\r\n                return result;\r\n            }\r\n        };\r\n    }\r\n}","import { Yield, Done } from \"../util/index.js\";\r\nimport { Pipe } from \"../pipe.js\";\r\n\r\nexport function includes(value: any, fromIndex?: number): Pipe {\r\n    fromIndex = typeof fromIndex === 'number' ? fromIndex : 0;\r\n    return () => {\r\n        let i: number = -1;\r\n\r\n        return (result: IteratorResult<any>): Array<IteratorResult<any>> => {\r\n            ++i;\r\n            if (result?.done) {\r\n                return [Yield(false), result];\r\n            }\r\n            else if (i >= fromIndex && result.value === value) {\r\n                return [Yield(true), Done()];\r\n            }\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { Done, Yield } from \"../util/index.js\";\r\n\r\nexport function indexOf(value: any, fromIndex?: number): Pipe {\r\n    fromIndex = typeof fromIndex === 'number' ? fromIndex : 0;\r\n    return () => {\r\n        let i: number = -1;\r\n        return (result: IteratorResult<any>): IteratorResult<any> | Array<IteratorResult<any>> => {\r\n            ++i;\r\n            if (result?.done) {\r\n                return [Yield(-1), result];\r\n            }\r\n            else if (i >= fromIndex && value === result.value) {\r\n                return [Yield(i), Done()];\r\n            }\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { assertSync } from \"../util/index.js\";\r\n\r\nexport function intersection(source: Iterable<any, any, unknown>): Pipe {\r\n    assertSync(source);\r\n\r\n    return () => {\r\n        let sourceSet: Set<any> = source instanceof Set ? source : new Set<any>(source);\r\n\r\n        return (result: IteratorResult<any>): IteratorResult<any> => {\r\n            if (result?.done) {\r\n                return result;\r\n            }\r\n\r\n            if (sourceSet.has(result.value)) {\r\n                sourceSet.delete(result.value);\r\n                return result;\r\n            }\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { assertSync, Done, Yield } from \"../util/index.js\";\r\n\r\nexport function isDisjointFrom(source: Iterable<any, any, unknown>): Pipe {\r\n    assertSync(source);\r\n\r\n    return () => {\r\n\r\n        let sourceSet: Set<any> = source instanceof Set ? source : new Set<any>(source);\r\n\r\n        return (result: IteratorResult<any>): Array<IteratorResult<any>> => {\r\n            if (result?.done) {\r\n                return [Yield(true), result];\r\n            }\r\n\r\n            if (sourceSet.has(result.value)) {\r\n                return [Yield(false), Done()];\r\n            }\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { Done, Yield } from \"../util/index.js\";\r\n\r\nexport function isEmpty(): Pipe {\r\n    return () => {\r\n        return (result: IteratorResult<any>): Array<IteratorResult<any>> => {\r\n            return result?.done ? [Yield(true), result] : [Yield(false), Done()];\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { assertSync, Done, Yield } from \"../util/index.js\";\r\n\r\nexport function isSubsetOf(source: Iterable<any, any, unknown>): Pipe {\r\n    assertSync(source);\r\n\r\n    return () => {\r\n        let sourceSet: Set<any> = source instanceof Set ? source : new Set<any>(source);\r\n        return (result: IteratorResult<any>): Array<IteratorResult<any>> => {\r\n            if (result?.done) {\r\n                return [Yield(true), result];\r\n            }\r\n\r\n            if (!sourceSet.has(result.value)) return [Yield(false), Done()];\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { assertSync, Yield } from \"../util/index.js\";\r\n\r\nexport function isSupersetOf(source: Iterable<any, any, unknown>): Pipe {\r\n    assertSync(source);\r\n\r\n    return () => {\r\n        let sourceSet: Set<any> = source instanceof Set ? source : new Set<any>(source);\r\n\r\n        let found: number = 0;\r\n\r\n        return (result: IteratorResult<any>): Array<IteratorResult<any>> => {\r\n            if (result?.done) {\r\n                return found === sourceSet.size ? [Yield(true), result] : [Yield(false), result];\r\n            }\r\n\r\n            if (sourceSet.has(result.value)) {\r\n                ++found;\r\n            }\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\n\r\nexport function keys(): Pipe {\r\n    return () => {\r\n        let i: number = -1;\r\n        return (result: IteratorResult<any>): IteratorResult<any> => {\r\n            ++i;\r\n            if (!result?.done) {\r\n                if (Array.isArray(result.value) && result.value.length == 2) {\r\n                    result.value = result.value[0];\r\n                } else {\r\n                    result.value = i;\r\n                }\r\n            }\r\n            return result;\r\n        };\r\n    }\r\n}","import { findLastIndex } from \"./find-last-index.js\";\r\n\r\nexport const lastIndexOf = (value: any, fromIndex?: number) => findLastIndex((element) => element === value, fromIndex);","import { Pipe } from \"../pipe.js\";\r\nimport { Yield } from \"../util/index.js\";\r\n\r\nexport function last(): Pipe {\r\n    return () => {\r\n        let i: number = -1;\r\n        let last: any;\r\n        return (result: IteratorResult<any>): IteratorResult<any> | Array<IteratorResult<any>> => {\r\n            ++i;\r\n            if (result?.done) {\r\n                return i === 0 ? result : [Yield(last), result];\r\n            }\r\n            last = result.value;\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\n\r\nexport function mapTo(value: any): Pipe {\r\n    return () => {\r\n        return (result: IteratorResult<any>): IteratorResult<any> => {\r\n            result.value = value;\r\n            return result;\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\n\r\nexport function map(callbackFn: (element: any, index?: number) => any): Pipe {\r\n    callbackFn = typeof callbackFn === 'function' ? callbackFn : (e) => e;\r\n\r\n    return () => {\r\n        let i: number = -1;\r\n        return (result: IteratorResult<any>): IteratorResult<any> => {\r\n            ++i;\r\n            if (result?.done) {\r\n                return result;\r\n            }\r\n\r\n            result.value = callbackFn(result.value, i);\r\n            return result;\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { Yield, negativeInfinity } from \"../util/index.js\";\r\n\r\nexport function max(): Pipe {\r\n    return () => {\r\n        let max: number = negativeInfinity();\r\n\r\n        return (result: IteratorResult<any>): IteratorResult<any> | Array<IteratorResult<any>> => {\r\n            if (result?.done) {\r\n                return max === negativeInfinity() ? result : [Yield(max), result];\r\n            } else if (typeof result.value === 'number' && result.value > max) {\r\n                max = result.value;\r\n            }\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { Yield, positiveInfinity } from \"../util/index.js\";\r\n\r\nexport function min(): Pipe {\r\n    return () => {\r\n        let min: number = positiveInfinity();\r\n        return (result: IteratorResult<any>): IteratorResult<any> | Array<IteratorResult<any>> => {\r\n            if (result?.done) {\r\n                return min === positiveInfinity() ? result : [Yield(min), result];\r\n            } else if (typeof result.value === 'number' && result.value < min) {\r\n                min = result.value;\r\n            }\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\n\r\nexport function pop(): Pipe {\r\n    return () => {\r\n        let last: any;\r\n        return (result: IteratorResult<any>): IteratorResult<any> => {\r\n            if (result?.done) {\r\n                return result;\r\n            }\r\n            let lastResult = last;\r\n            last = result;\r\n            if (typeof last !== \"undefined\") {\r\n                return lastResult;\r\n            }\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { Yield } from \"../util/index.js\";\r\n\r\nexport function reduce(accumulator: (accumulator: any, currentValue: any, index?: number) => any, initialValue?: any): Pipe {\r\n    return () => {\r\n        let i: number = -1;\r\n        let value: any;\r\n        return (result: IteratorResult<any>): Array<IteratorResult<any>> => {\r\n            ++i;\r\n            if (i === 0) {\r\n                value = initialValue ?? result.value;\r\n            }\r\n            if (result?.done) {\r\n                return [Yield(value), result];\r\n            }\r\n\r\n            value = accumulator(value, result.value, i);\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\n\r\nexport function reverse(): Pipe {\r\n    return () => {\r\n        let buffer: Array<any> = new Array<any>();\r\n        return (result: IteratorResult<any>): Array<IteratorResult<any>> => {\r\n            if (result?.done) {\r\n                return [...buffer, result];\r\n            }\r\n            buffer.unshift(result);\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\n\r\nexport function scan(accumulator: (accumulator: any, currentValue: any, index?: number) => any, initialValue?: any): Pipe {\r\n    return () => {\r\n        let i: number = -1;\r\n        let value: any;\r\n        return (result: IteratorResult<any>): IteratorResult<any> => {\r\n            ++i;\r\n            if (i === 0) {\r\n                value = initialValue ?? result.value;\r\n            }\r\n\r\n            if (!result?.done) {\r\n                result.value = value = accumulator(value, result.value, i);\r\n            }\r\n\r\n            return result;\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { Yield } from \"../util/yield.js\";\r\n\r\nexport function size(): Pipe {\r\n    return () => {\r\n        let i: number = -1;\r\n\r\n        return (result: IteratorResult<any>): Array<IteratorResult<any>> => {\r\n            ++i;\r\n            if (result?.done) {\r\n                return [Yield(i), result];\r\n            }\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { negativeInfinity } from \"../util/index.js\";\r\n\r\nexport function skipLast(count: number): Pipe {\r\n    count = (typeof count === \"number\" && count > 0) ? count : negativeInfinity();\r\n    return () => {\r\n        let items: Array<any> = new Array<any>();\r\n        return (result: IteratorResult<any>): IteratorResult<any> => {\r\n            items.push(result);\r\n\r\n            if (result.done) {\r\n                return result;\r\n            } else if (items.length > count) {\r\n                return items.shift();\r\n            }\r\n        };\r\n    }\r\n}","import { drop } from \"./drop.js\";\r\n\r\nexport const skip = drop;","import { Pipe } from \"../pipe.js\";\r\nimport { Done } from \"../util/done.js\";\r\n\r\nexport function slice(start: number, end?: number): Pipe {\r\n    start = (typeof start === 'number' && start >= 0) ? start : 0;\r\n    end = (typeof end === 'number' && end > start) ? end : Infinity;\r\n    return () => {\r\n        let i: number = -1;\r\n        return (result: IteratorResult<any>): IteratorResult<any> => {\r\n            ++i;\r\n            if (result?.done) {\r\n                return result;\r\n            }\r\n\r\n            if (i >= start && i < end) {\r\n                return result;\r\n            } else if (i === end) {\r\n                return Done();\r\n            }\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { Yield, Done } from \"../util/index.js\";\r\n\r\nexport function some(predicate: (element: any, index?: number) => boolean): Pipe {\r\n    return () => {\r\n        return (result: IteratorResult<any>): Array<IteratorResult<any>> => {\r\n            if (result?.done) {\r\n                return [Yield(false), result];\r\n            } else if (predicate(result.value)) {\r\n                return [Yield(true), Done()];\r\n            }\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { Yields } from \"../util/yields.js\";\r\n\r\nexport function splice(start: number, deleteCount: number, ...elements: Array<any>): Pipe {\r\n    start = (typeof start === 'number' && start >= 0) ? start : 0;\r\n    deleteCount = (typeof deleteCount === 'number' && deleteCount >= 0) ? deleteCount : 0;\r\n    return () => {\r\n        let i: number = -1;\r\n        return (result: IteratorResult<any>): IteratorResult<any> | Array<IteratorResult<any>> => {\r\n            ++i;\r\n            if (i < start || i >= (start + deleteCount)) {\r\n                return result;\r\n            } else if (i === start && Array.isArray(elements)) {\r\n                return Yields(elements);\r\n            }\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { Yields, push } from \"../util/index.js\";\r\n\r\nexport function startWith(...elements: Array<any>): Pipe {\r\n    return () => {\r\n        let sent: boolean = false;\r\n        return (result: IteratorResult<any>): IteratorResult<any> | Array<IteratorResult<any>> => {\r\n            if (!sent) {\r\n                sent = true;\r\n                return push(Yields(elements), result);\r\n            }\r\n\r\n            return result;\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { Yield } from \"../util/index.js\";\r\n\r\nexport function sum(): Pipe {\r\n    return () => {\r\n        let sum: number = 0;\r\n        return (result: IteratorResult<any>): Array<IteratorResult<any>> => {\r\n            if (result?.done) {\r\n                return [Yield(sum), result];\r\n            }\r\n            if (typeof result.value === 'number') {\r\n                sum += result.value;\r\n            }\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { assertSync, Yields, push } from \"../util/index.js\";\r\n\r\nexport function symmetricDifference(source: Iterable<any, any, unknown>): Pipe {\r\n    assertSync(source);\r\n\r\n    let exists: Set<any> = new Set<any>();\r\n\r\n    return () => (result: IteratorResult<any>): IteratorResult<any> | Array<IteratorResult<any>> => {\r\n        if (result?.done) {\r\n            let results: Array<any> = new Array<any>();\r\n            for (const item of source) {\r\n                if (!exists.has(item)) {\r\n                    exists.add(item);\r\n                    results.push(item);\r\n                }\r\n            }\r\n            return push(Yields(results), result);\r\n        }\r\n\r\n        if (!exists.has(result.value)) {\r\n            exists.add(result.value);\r\n            return result;\r\n        }\r\n    };\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { Yields, push, positiveInfinity } from \"../util/index.js\";\r\n\r\nexport function takeLast(count: number): Pipe {\r\n    count = (typeof count === \"number\" && count > 0) ? count : positiveInfinity();\r\n\r\n    return () => {\r\n        let last: Array<any> = new Array<any>();\r\n        return (result: IteratorResult<any>): IteratorResult<any> | Array<IteratorResult<any>> => {\r\n            if (result?.done) {\r\n                return push(Yields(last), result);\r\n            }\r\n\r\n            if (last.length === count) {\r\n                last.shift();\r\n            }\r\n\r\n            last.push(result.value);\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { Done } from \"../util/index.js\";\r\n\r\nexport function takeWhile(predicate: (element: any, inclusive?: number) => boolean, inclusive?: boolean): Pipe {\r\n    inclusive = typeof inclusive === 'boolean' ? inclusive : false;\r\n\r\n    return () => {\r\n        var i: number = -1;\r\n        return (result: IteratorResult<any>): IteratorResult<any> | Array<IteratorResult<any>> => {\r\n            ++i;\r\n\r\n            if (result?.done) {\r\n                return result;\r\n            }\r\n\r\n            if (!predicate(result.value, i)) {\r\n                if (inclusive) {\r\n                    return [result, Done()]\r\n                }\r\n\r\n                return Done();\r\n            }\r\n\r\n            return result;\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { Done, positiveInfinity } from \"../util/index.js\";\r\n\r\nexport function take(count: number): Pipe {\r\n    count = (typeof count === \"number\" && count > 0) ? count : positiveInfinity();\r\n    return () => {\r\n        var i: number = -1;\r\n        return (result: IteratorResult<any>): IteratorResult<any> => {\r\n            ++i;\r\n            if (i >= count) {\r\n                return Done();\r\n            }\r\n            return result;\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { Yield } from \"../util/index.js\";\r\n\r\nexport function toArray(): Pipe {\r\n    return () => {\r\n        let buffer: Array<any> = new Array<any>();\r\n        var i: number = -1;\r\n\r\n        return (result: IteratorResult<any>): IteratorResult<any> | Array<IteratorResult<any>> => {\r\n            ++i;\r\n            if (result?.done) {\r\n                return [Yield(buffer), result];\r\n            }\r\n\r\n            buffer.push(result.value);\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { Yield } from \"../util/index.js\";\r\n\r\nexport function toSet(): Pipe {\r\n    return () => {\r\n        let buffer: Set<any> = new Set<any>();\r\n        return (result: IteratorResult<any>): IteratorResult<any> | Array<IteratorResult<any>> => {\r\n            if (result?.done) {\r\n                return [Yield(buffer), result];\r\n            }\r\n\r\n            buffer.add(result.value);\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\nimport { assertSync, push, Yields } from \"../util/index.js\";\r\n\r\nexport function union(source: Iterable<any, any, unknown>): Pipe {\r\n    assertSync(source);\r\n\r\n    return () => {\r\n        let exists: Set<any> = new Set<any>();\r\n        return (result: IteratorResult<any>): IteratorResult<any> | Array<IteratorResult<any>> => {\r\n            if (result?.done) {\r\n                let results: Array<any> = new Array<any>();\r\n\r\n                for (const item of source) {\r\n                    if (!exists.has(item)) {\r\n                        exists.add(item);\r\n                        results.push(item);\r\n                    }\r\n                }\r\n\r\n                return push(Yields(results), result);\r\n            }\r\n\r\n            if (!exists.has(result.value)) {\r\n                exists.add(result.value);\r\n                return result;\r\n            }\r\n        };\r\n    }\r\n}","import { Pipe } from \"../pipe.js\";\r\n\r\nexport function values(): Pipe {\r\n    return () => {\r\n        return (result: IteratorResult<any>): IteratorResult<any> => {\r\n            if (!result.done) {\r\n                if (Array.isArray(result.value) && result.value.length == 2)\r\n                    result.value = result.value[1];\r\n            }\r\n            return result;\r\n        };\r\n    }\r\n}"],"names":["pipeSync","source","pipes","Symbol","iterator","Error","Array","isArray","filter","p","length","pipeIterators","pipe","push","iteratorResult","next","done","results","i","allpipeResults","j","piperesult","e","_piperesult$e","_piperesult$e2","hasOwnProperty","value","pipeAsync","_x","_pipeAsync","apply","arguments","asyncIterator","_asyncGeneratorDelegate","_asyncIterator","_awaitAsyncGenerator","Yield","Yields","values","yields","Done","Object","assertSync","array","splice","positiveInfinity","Number","POSITIVE_INFINITY","negativeInfinity","NEGATIVE_INFINITY","at","index","result","average","count","sum","bufferCount","every","buffer","shift","concat","from","defaultIfEmpty","isempty","difference","sourceSet","Set","has","add","distinctUntilChanged","comparator","a","b","last","distinctUntilKeyChanged","key","_result$value","_last","distinct","keyselector","elements","drop","elementAt","entries","endWith","predicate","fill","start","end","findIndex","fromIndex","findLastIndex","lastIndex","findLast","find","first","flat","depth","ignoreElements","includes","indexOf","intersection","delete","isDisjointFrom","isEmpty","isSubsetOf","isSupersetOf","found","size","keys","lastIndexOf","element","mapTo","map","callbackFn","max","min","pop","lastResult","reduce","accumulator","initialValue","reverse","unshift","scan","skipLast","items","skip","slice","Infinity","some","deleteCount","startWith","sent","symmetricDifference","exists","item","takeLast","takeWhile","inclusive","take","toArray","toSet","union"],"mappings":"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"}